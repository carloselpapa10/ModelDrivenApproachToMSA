[comment encoding = UTF-8 /]
[module eventuateAggregateGenerate('http://it.univa.disim.micro')]


[template public generateElement(aMicroserviceArchitecture : MicroserviceArchitecture)]
[comment @main/]
[file ('eventuate-tram-aggregate-domain-events/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.[aMicroserviceArchitecture.name.toLower()/]</groupId>
	<artifactId>eventuate-tram-aggregate-domain-events</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>eventuate-tram-aggregate-domain-events</name>

	<repositories>
		<repository>
			<id>jcenter</id>
			<url>http://jcenter.bintray.com</url>
		</repository>
	</repositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<eventuateTramSagasVersion>0.5.0.RELEASE</eventuateTramSagasVersion>
		<eventuateTramVersion>0.6.0.RELEASE</eventuateTramVersion>
		<eventuateClientVersion>0.20.1.RELEASE</eventuateClientVersion>

	</properties>

	<dependencies>
		<dependency>
			<groupId>io.eventuate.tram.core</groupId>
			<artifactId>eventuate-tram-events</artifactId>
			<version>${eventuateTramVersion}</version>
		</dependency>

	</dependencies>
	<build>
		<finalName>eventuate-tram-aggregate-domain-events</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
				<configuration>
					<reuseForks>false</reuseForks>
					<forkCount>1</forkCount>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<configuration>
					<skipDockerBuild>true</skipDockerBuild>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
[/file]

[file ('eventuate-tram-aggregate-domain-events/src/main/java/io/eventuate/tram/events/aggregates/AbstractAggregateDomainEventPublisher.java', false, 'UTF-8')]
package io.eventuate.tram.events.aggregates;

import io.eventuate.tram.events.common.DomainEvent;
import io.eventuate.tram.events.publisher.DomainEventPublisher;

import java.util.List;
import java.util.function.Function;

public class AbstractAggregateDomainEventPublisher<A, E extends DomainEvent> {
	
	private Function<A, Object> idSupplier;
	private DomainEventPublisher eventPublisher;
	private Class<A> aggregateType;

	protected AbstractAggregateDomainEventPublisher(DomainEventPublisher eventPublisher, Class<A> aggregateType,
			Function<A, Object> idSupplier) {
		this.eventPublisher = eventPublisher;
		this.aggregateType = aggregateType;
		this.idSupplier = idSupplier;
	}

	public void publish(A aggregate, List<E> events) {
	    eventPublisher.publish(aggregateType, idSupplier.apply(aggregate), (List<DomainEvent>) events);
	}
}
[/file]

[file ('eventuate-tram-aggregate-domain-events/src/main/java/io/eventuate/tram/events/aggregates/ResultWithDomainEvents.java', false, 'UTF-8')]
package io.eventuate.tram.events.aggregates;

import io.eventuate.tram.events.common.DomainEvent;

import java.util.Arrays;
import java.util.List;

public class ResultWithDomainEvents<A, E extends DomainEvent> {

  public final A result;
  public final List<E> events;

  public ResultWithDomainEvents(A result, List<E> events) {
    this.result = result;
    this.events = events;
  }

  public ResultWithDomainEvents(A result, E... events) {
    this.result = result;
    this.events = Arrays.asList(events);
  }
}
[/file]

[/template]
