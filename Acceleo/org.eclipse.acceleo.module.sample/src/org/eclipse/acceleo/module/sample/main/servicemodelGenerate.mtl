[comment encoding = UTF-8 /]
[module servicemodelGenerate('http://it.univa.disim.micro')]


[template public generateElement(aMicroserviceArchitecture : MicroserviceArchitecture)]
[comment @main/]
[file ('service-model/pom.xml', false, 'UTF-8')]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.[aMicroserviceArchitecture.name.toLower()/]</groupId>
	<artifactId>service-model</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>service-model</name>

	<repositories>
		<repository>
			<id>jcenter</id>
			<url>http://jcenter.bintray.com</url>
		</repository>
	</repositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<eventuateTramSagasVersion>0.5.0.RELEASE</eventuateTramSagasVersion>
		<eventuateTramVersion>0.6.0.RELEASE</eventuateTramVersion>
		<eventuateClientVersion>0.20.1.RELEASE</eventuateClientVersion>
		<eventuateLocalVersion>0.17.0.RELEASE</eventuateLocalVersion>

	</properties>

	<dependencies>
		<!-- used by everyone -->
		<dependency>
			<groupId>org.[aMicroserviceArchitecture.name.toLower()/]</groupId>
			<artifactId>eventuate-tram-aggregate-domain-events</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
	
		<dependency>
			<groupId>io.eventuate.tram.core</groupId>
			<artifactId>eventuate-tram-commands</artifactId>
			<version>${eventuateTramVersion}</version>
		</dependency>

		<dependency>
		  <groupId>io.eventuate.tram.sagas</groupId>
		  <artifactId>eventuate-jpa-sagas-framework</artifactId>
		  <version>${eventuateTramSagasVersion}</version>
		</dependency>
		
		<dependency>
		  <groupId>io.eventuate.tram.sagas</groupId>
		  <artifactId>eventuate-tram-sagas-simple-dsl</artifactId>
		  <version>${eventuateTramSagasVersion}</version>
		</dependency>
		
		<dependency>
		  <groupId>io.eventuate.tram.core</groupId>
		  <artifactId>eventuate-tram-jdbc-kafka</artifactId>
		  <version>${eventuateTramVersion}</version>
		</dependency>
		
		<dependency>
		    <groupId>io.eventuate.client.java</groupId>
		    <artifactId>eventuate-client-java-spring</artifactId>
		    <version>${eventuateClientVersion}</version>
		</dependency>

		<!-- swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.2.2</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.2.2</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.36</version>
		</dependency>

	</dependencies>

	<build>
		<finalName>service-model</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
				<configuration>
					<reuseForks>false</reuseForks>
					<forkCount>1</forkCount>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<configuration>
					<skipDockerBuild>true</skipDockerBuild>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
[/file]

[file ('service-model/src/main/java/org/'+aMicroserviceArchitecture.name.toLower()+'/servicemodel/common/Channels.java', false, 'UTF-8')]
package org.[aMicroserviceArchitecture.name.toLower() /].servicemodel.common;

public class Channels {
[for (s : Service | aMicroserviceArchitecture.services)]
	[if (s.oclIsTypeOf(micro::AggregateService))]
	public static final String [s.fullname.toUpper()/] = "[s.fullname.toLower()/]";
    [/if]
[/for]
}

[/file]
[file ('service-model/src/main/java/org/'+aMicroserviceArchitecture.name.toLower()+'/servicemodel/common/BusinessException.java', false, 'UTF-8')]
package org.[aMicroserviceArchitecture.name.toLower()/].servicemodel.common;

public class BusinessException extends RuntimeException{

	private static final long serialVersionUID = -2836217323379334954L;

	public BusinessException() {
		super();
	}

	public BusinessException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
		super(message, cause, enableSuppression, writableStackTrace);
	}

	public BusinessException(String message, Throwable cause) {
		super(message, cause);
	}

	public BusinessException(String message) {
		super(message);
	}

	public BusinessException(Throwable cause) {
		super(cause);
	}
	
	public BusinessException(String errCode, String errMsg) {
		this.errCode = errCode;
		this.errMsg = errMsg;
	}
	
	private String errCode;
	private String errMsg;

	public String getErrCode() {
		return errCode;
	}

	public void setErrCode(String errCode) {
		this.errCode = errCode;
	}

	public String getErrMsg() {
		return errMsg;
	}

	public void setErrMsg(String errMsg) {
		this.errMsg = errMsg;
	}
}
[/file]

[comment API /]

[for (s : Service | aMicroserviceArchitecture.services)]

	[if (s.oclIsTypeOf(micro::AggregateService))]	
	
		[for (command : Command | s.oclAsType(micro::AggregateService).api.commands)]

			[file ('service-model/src/main/java/org/'+aMicroserviceArchitecture.name.toLower()+'/servicemodel/'+s.shortname.toLower()+'/api/commands/'+command.name+'.java', false, 'UTF-8')]
package org.[aMicroserviceArchitecture.name.toLower()/].servicemodel.[s.shortname.toLower()/].api.commands;

import java.util.List;
import io.eventuate.tram.commands.common.Command;
import org.[aMicroserviceArchitecture.name.toLower()/].servicemodel.[s.shortname.toLower()/].api.info.*;

public class [command.name/] implements Command{

	[for (info : Info | s.oclAsType(micro::AggregateService).api.infos)]
	private [info.name/]Info [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	[/for]
	
	public [command.name/]() {}

	[for (info : Info | s.oclAsType(micro::AggregateService).api.infos)]
	public [command.name/]([info.name/]Info [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info) {
		super();
		this.[info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info = [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	}

	[/for]
	[for (info : Info | s.oclAsType(micro::AggregateService).api.infos)]
	public [info.name/]Info get[info.name/]Info() {
		return [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	}

	public void set[info.name/]Info([info.name/]Info [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info) {
		this.[info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info = [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	}

	[/for]
}
			[/file]
		[/for]

		[for (event : Event | s.oclAsType(micro::AggregateService).api.events)]

			[file ('service-model/src/main/java/org/'+aMicroserviceArchitecture.name.toLower()+'/servicemodel/'+s.shortname.toLower()+'/api/events/'+event.name+'.java', false, 'UTF-8')]
package org.[aMicroserviceArchitecture.name.toLower()/].servicemodel.[s.shortname.toLower()/].api.events;

import org.[aMicroserviceArchitecture.name.toLower()/].servicemodel.[s.shortname.toLower()/].api.info.*;

public class [event.name/] implements [s.shortname/]DomainEvent{
	
	[for (info : Info | s.oclAsType(micro::AggregateService).api.infos)]
	private [info.name/]Info [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	[/for]

	public [event.name/]() {}

	[for (info : Info | s.oclAsType(micro::AggregateService).api.infos)]
	public [event.name/]([info.name/]Info [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info) {
		super();
		this.[info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info = [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	}

	[/for]
	[for (info : Info | s.oclAsType(micro::AggregateService).api.infos)]
	public [info.name/]Info get[info.name/]Info() {
		return [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	}

	public void set[info.name/]Info([info.name/]Info [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info) {
		this.[info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info = [info.name.at(1).toLower()+info.name.substring(2, info.name.size())/]Info;
	}

	[/for]
}
			[/file]
		[/for]

		[for (modelEvent : ModelEvent | s.oclAsType(micro::AggregateService).modelEvents)]
			[file ('service-model/src/main/java/org/'+aMicroserviceArchitecture.name.toLower()+'/servicemodel/'+s.shortname.toLower()+'/api/events/'+modelEvent.model.name+'DomainEvent.java', false, 'UTF-8')]
package org.[aMicroserviceArchitecture.name.toLower()/].servicemodel.[s.shortname.toLower()/].api.events;

import io.eventuate.tram.events.common.DomainEvent;

public interface [modelEvent.model.name/]DomainEvent extends DomainEvent{
}		
			[/file]
		[/for]		

		[for (info : Info | s.oclAsType(micro::AggregateService).api.infos)]
			[file ('service-model/src/main/java/org/'+aMicroserviceArchitecture.name.toLower()+'/servicemodel/'+s.shortname.toLower()+'/api/info/'+info.name+'Info.java', false, 'UTF-8')]
package org.[aMicroserviceArchitecture.name.toLower()/].servicemodel.[s.shortname.toLower()/].api.info;

import java.util.ArrayList;
import java.util.List;

public class [info.name/]Info {

			[for (attribute : Attribute | info.dto.attributes)]
				[if (attribute.oclIsTypeOf(micro::PrimitiveTypeAttribute))]
					[if (attribute.isMany)]
	private List<[attribute.oclAsType(micro::PrimitiveTypeAttribute).type/]> [attribute.name.toLower()/];								
						[else]
    private [attribute.oclAsType(micro::PrimitiveTypeAttribute).type/] [attribute.name.toLower()/];									
					[/if]
				[/if]
				[if (attribute.oclIsTypeOf(micro::ReferenceAttribute))]
					[if (attribute.isMany)]
	private List<[attribute.oclAsType(micro::ReferenceAttribute).type.name/]Info> [attribute.name.toLower()/]Info = new ArrayList<>();							
						[else]
	private [attribute.oclAsType(micro::ReferenceAttribute).type.name/]Info [attribute.name.toLower()/]Info;								
					[/if]
				[/if]
			[/for]

	[comment empty constructor /]
	public [info.name/]Info(){}

	[comment setter and getter /]
				[for (attribute : Attribute | info.dto.attributes)]
	public void [if (attribute.oclIsTypeOf(micro::PrimitiveTypeAttribute))]set[attribute.name /]([if (attribute.isMany)]List<[attribute.oclAsType(micro::PrimitiveTypeAttribute).type/]>[else][attribute.oclAsType(micro::PrimitiveTypeAttribute).type/][/if] [attribute.name.toLower()/])[/if][if (attribute.oclIsTypeOf(micro::ReferenceAttribute))]set[attribute.name /]Info([if (attribute.isMany)]List<[attribute.oclAsType(micro::ReferenceAttribute).type.name/]Info>[else][attribute.oclAsType(micro::ReferenceAttribute).type.name/]Info[/if] [attribute.name.toLower()/]Info)[/if]{
	[if (attribute.oclIsTypeOf(micro::PrimitiveTypeAttribute))]
		this.[attribute.name.toLower()/] = [attribute.name.toLower()/];
		[else]
		this.[attribute.name.toLower()/]Info = [attribute.name.toLower()/]Info;
	[/if]
	}	

	public [if (attribute.oclIsTypeOf(micro::PrimitiveTypeAttribute))][if (attribute.isMany)]List<[attribute.oclAsType(micro::PrimitiveTypeAttribute).type/]>[else][attribute.oclAsType(micro::PrimitiveTypeAttribute).type/][/if] get[attribute.name/]() {[/if][if (attribute.oclIsTypeOf(micro::ReferenceAttribute))][if (attribute.isMany)]List<[attribute.oclAsType(micro::ReferenceAttribute).type.name/]Info>[else][attribute.oclAsType(micro::ReferenceAttribute).type.name/]Info[/if] get[attribute.name/]Info() {[/if]
 	[if (attribute.oclIsTypeOf(micro::PrimitiveTypeAttribute))]
		return [attribute.name.toLower() /];
		[else]
		return [attribute.name.toLower() /]Info;
	[/if]		
	}
				[/for]
}			
			[/file]
		[/for]
    [/if]
[/for]
[/template]
